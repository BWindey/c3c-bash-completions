#compdef _c3c c3c

function c3c_multi_option {
    if [[ $# -lt 1 ]]; then
        echo ""
        return
    fi

    local result="--$1=: :("
    shift
    local arr=("$@")

    for item in "${arr[@]}"; do 
        result+="$item "
    done

    echo "${result%?})"
}

function c3c_toggle_option {
    c3c_multi_option "$1" "yes" "no"
}

function c3c_get_targets {
    c3c project view --targets 2>/dev/null
}

function c3c_get_platforms {
    c3c --list-targets \
        | tail -n +2 \
        | sed "s/^ *\([^ ]*\) *$/\1/" \
        | tr '\n' ' ' 
    }

# TODO Add complex options for things like --cc
# TODO Separate commands that only work on build commands

c3c_subcommands=(
    "compile"
    "init"
    "init-lib"
    "build"
    "benchmark"
    "test"
    "clean"
    "run"
    "dist"
    "clean-run"
    "compile-run"
    "compile-only"
    "compile-benchmark"
    "compile-test"
    "static-lib"
    "dynamic-lib"
    "vendor-fetch"
    "project"
)

c3c_simple_options=(
    "-h"
    "-hh"
    "--help"
    "-V"
    "--version"
    "-q"
    "--quiet"
    "-v"
    "-vv"
    "-vvv"
    "-E"
    "-P"
    "-C"
    "-"
    "-o"
    "-O0"
    "-O1"
    "-O2"
    "-O3"
    "-O4"
    "-O5"
    "-Os"
    "-Oz"
    "-D"
    "-U"
    "--about"
    "--build-env"
    "--run-dir"
    "--libdir"
    "--lib"
    "--sources"
    "--stdlib"
    "--no-entry"
    "--path"
    "--template"
    "--symtab"
    "--run-once"
    "--suppress-run"
    "--output-dir"
    "--build-dir"
    "--obj-out"
    "--script-dir"
    "--llvm-out"
    "--asm-out"
    "--header-output"
    "--emit-llvm"
    "--emit-asm"
    "--obj"
    "--no-obj"
    "--no-headers"
    "--threads"
    "--lsp"
    "--use-old-slice-copy"
    "-g"
    "-g0"
    "--echo-prefix"
    "--test-filter"
    "--test-breakpoint"
    "--test-nosort"
    "--test-noleak"
    "--test-nocapture"
    "--test-quiet"
    "-l"
    "-L"
    "-z"
    "--cc"
    "--emit-only"
    "--panicfn"
    "--testfn"
    "--benchfn"
    "--max-vector-size"
    "--print-linking"
    "--benchmarking"
    "--testing"
    "--list-attributes"
    "--list-builtins"
    "--list-keywords"
    "--list-operators"
    "--list-precedence"
    "--list-project-properties"
    "--list-manifest-properties"
    "--list-targets"
    "--list-type-properties"
    "--print-output"
    "--print-input"
    "--winsdk"
    "--windef"
    "--win-vs-dirs"
    "--macossdk"
    "--macos-min-version"
    "--macos-sdk-version"
    "--linux-crt"
    "--linux-crtbegin"
    "--android-ndk"
    "--android-api"
    "--use-old-enums"
    "--list-asm"
    "--echo-prefix"
)

c3c_toggle_options=(
    "$(c3c_toggle_option safe)"
    "$(c3c_toggle_option panic-msg)"
    "$(c3c_toggle_option single-module)"
    "$(c3c_toggle_option show-backtrace)"
    "$(c3c_toggle_option ansi)"
    "$(c3c_toggle_option use-stdlib)"
    "$(c3c_toggle_option link-libc)"
    "$(c3c_toggle_option emit-stdlib)"
    "$(c3c_toggle_option strip-unused)"
)

c3c_multi_options=(
    "$(c3c_multi_option validation lenient strict obnoxious)"
    "$(c3c_multi_option trust none include full)"
    "$(c3c_multi_option optlevelnone less more max)"
    "$(c3c_multi_option optsize none small tiny)"
    "$(c3c_multi_option linker builtin cc custom)"
    "$(c3c_multi_option reloc none pic PIC pie PIE)"
    "$(c3c_multi_option x86cpu baseline ssse6 sse4 avx1 avx2-v1 avx2-v2 avx512 native)"
    "$(c3c_multi_option x86vec none mmx sse avx avx512 default)"
    "$(c3c_multi_option riscvfloat none float double)"
    "$(c3c_multi_option memory-env normal small tiny none)"
    "$(c3c_multi_option fp-math strict relaxed fast)"
    "$(c3c_multi_option win64-simd array full)"
    "$(c3c_multi_option win-debug codeview dwarf)"
    "$(c3c_multi_option wincrt none static-debug static dynamic-debug dynamic)"
    "$(c3c_multi_option sanitize address memory thread)"
)

c3c_complex_options=(
    "--target[Target platform]: :($(c3c_get_platforms))"
)

c3c_project_view_filters=(
    "-h"
    "--help"
    "-v"
    "-vv"
    "--authors"
    "--version"
    "--language-revision"
    "--warnings-used"
    "--c3l-lib-search-paths"
    "--c3l-lib-dependencies"
    "--source-paths"
    "--output-location"
    "--default-optimization"
    "--targets"
)


function _c3c {
    local line
    _arguments -C \
        "1: :(${c3c_subcommands[*]})"\
        "${c3c_simple_options[@]}" \
        "${c3c_multi_options[@]}" \
        "${c3c_toggle_options[@]}" \
        "${c3c_complex_options[@]}" \
        "*::args:->args"

    case ${line[1]} in
        build|run|dist|directives|bench|clean-run)
            _c3c_build
            ;;

        project)
            _c3c_project
            ;;

        view)
            _c3c_view
            ;;

        init)
            _c3c_init
            ;;
    esac

}

function _c3c_build {
    _arguments \
        "1: :($(c3c_get_targets))" \
        "${c3c_simple_options[@]}" \
        "${c3c_multi_options[@]}" \
        "${c3c_toggle_options[@]}" \
        "${c3c_complex_options[@]}"
    }

function _c3c_project {
    local line

    _arguments -C \
        "1:: :(view add-target fetch)" \
        "-h[Print help]" \
        "--help[Print help]" \
        "*::args:->args"

    if [[ ${line[1]} = "view" ]]; then
        _c3c_project_view
    fi
}

function _c3c_init {
    _arguments "--template: :(exe static-lib dynamic-lib)"
}

function _c3c_project_view {
    _arguments "${c3c_project_view_filters[@]}"
}

